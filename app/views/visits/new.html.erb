<div class="visits-layout">
  <header>
    <h1 class="h3 pb-2 mb-3 border-bottom">Registrar Visita</h1>
  </header>

  <%= simple_form_for([@place, @visit], html: { class: "h-100 d-flex flex-column justify-content-between" }) do |f| %>
    <div class="layout-content">
      <div class="wizard d-flex flex-column">
        <!-- One "tab" for each step in the form: -->
        <div class="tab">
          <p class="mb-4 h5">
            <%= @place.address.capitalize %>
          </p>
            <%= f.input :state, collection: Visit.states.keys.map { |state| [state.titleize, state] },label: "Desfecho", input_html: { class: "h5 form-control form-control-lg" } %>
        </div>
        <div class="tab h5">
          <%= f.input :focus_quantity, label: "Quantos focos?" %>
          <%= f.input :eliminated, as: :boolean, label: "Focos foram eliminados?" %>
          <%= f.input :dengue_last_3m, as: :boolean, label: "Houve diagnóstico de dengue nos últimos três meses?" %>
        </div>
      
        <div class="tab h5">
            <%= f.input :observations, label: "Observações" %>
        </div>
      </div>
    </div>
    <footer class="pb-3">
      <div class="btn-group d-flex">
        <%= f.button :button, "Voltar", id: "prevBtn", class: "btn btn-secondary rounded-pill m-2" %>
        <%= f.button :button, "Avançar", id: "nextBtn", class: "btn btn-primary rounded-pill m-2" %>
        <%= f.button :button, 'Finalizar', id: "submitBtn", type: :submit, method: "post", class: "btn btn-primary rounded-pill m-2" %>
      </div>
      <!-- Circles which indicates the steps of the form: -->
      <div class="wizard-steps">
        <div class="text-center mt-2">
          <span class="step"></span>
          <span class="step"></span>
          <span class="step"></span>
        </div>
      </div>
    </footer>
  <% end %>
  
</div>

<script>

var currentTab = 0; // Current tab is set to be the first tab (0)
showTab(currentTab); // Display the current tab

const prevButtonEl = document.getElementById('prevBtn');
prevButtonEl.addEventListener('click', event => {
  event.preventDefault();
  nextPrev(-1);
});

const nextButtonEl = document.getElementById('nextBtn');
nextButtonEl.addEventListener('click', event => {
  event.preventDefault();
  nextPrev(1);
});

function showTab(n) {
  // This function will display the specified tab of the form ...
  var tabs = document.getElementsByClassName("tab");
  tabs[n].style.display = "block";
  // ... and fix the Previous/Next buttons:
  if (n == 0) {
    document.getElementById("prevBtn").style.display = "none";
  } else {
    document.getElementById("prevBtn").style.display = "inline";
  }
  if (n == (tabs.length - 1)) {
    document.getElementById("nextBtn").style.display = "none";
    document.getElementById("submitBtn").style.display = "inline";
  } else {
    document.getElementById("nextBtn").style.display = "inline";
    document.getElementById("nextBtn").innerHTML = "Avançar";
    document.getElementById("submitBtn").style.display = "none";
  }
  // ... and run a function that displays the correct step indicator:
  fixStepIndicator(n)
}

function nextPrev(n) {
  // This function will figure out which tab to display
  var x = document.getElementsByClassName("tab");
  // Exit the function if any field in the current tab is invalid:
  if (n == 1 && !validateForm()) return false;
  // Hide the current tab:
  x[currentTab].style.display = "none";
  // Increase or decrease the current tab by 1:
  currentTab = currentTab + n;
  // if you have reached the end of the form... :
  if (currentTab >= x.length) {
    //...the form gets submitted:
    document.getElementById("regForm").submit();
    return false;
  }
  // Otherwise, display the correct tab:
  showTab(currentTab);
}

function validateForm() {
  // This function deals with validation of the form fields
  var x, y, i, valid = true;
  x = document.getElementsByClassName("tab");
  y = x[currentTab].getElementsByTagName("input");
  // A loop that checks every input field in the current tab:
  for (i = 0; i < y.length; i++) {
    // If a field is empty...
    if (y[i].value == "") {
      // add an "invalid" class to the field:
      y[i].className += " invalid";
      // and set the current valid status to false:
      valid = false;
    }
  }
  // If the valid status is true, mark the step as finished and valid:
  if (valid) {
    document.getElementsByClassName("step")[currentTab].className += " finish";
  }
  return valid; // return the valid status
}

function fixStepIndicator(n) {
  // This function removes the "active" class of all steps...
  var steps = document.getElementsByClassName("step");
  for (var i = 0; i < steps.length; i++) {
    steps[i].className = steps[i].className.replace(" active", "");
  }
  //... and adds the "active" class to the current step:
  steps[n].className += " active";
}
</script>